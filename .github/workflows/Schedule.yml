name: ScheduleRunnerNba

on:
  schedule:
    - cron: '0 14 * * *'  # This runs every day at 10:00 AM UTC

  workflow_dispatch:   # Allow manual triggering and custom parameters
    inputs:
      branch:
        description: 'Branch to deploy'  # Custom input to specify a branch
        required: false  # Optional, set to true if you want this to be required
        default: 'main'  # Default to the branch that triggered the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      GSHEET_NBA_MAKU_CREDENTIALS: ${{ secrets.GSHEET_NBA_MAKU_CREDENTIALS }}
      GSHEET_NBA_MAKU_FOLDER_ID: ${{ secrets.GSHEET_NBA_MAKU_FOLDER_ID }}
      FORMAT_OUTPUT_TYPE: ${{ vars.FORMAT_OUTPUT_TYPE }}
      FILENAME_OUTPUT: ${{ vars.FILENAME_OUTPUT }}
      GSHEET_NBA_MAKU_TIME_DELAY: ${{ vars.GSHEET_NBA_MAKU_TIME_DELAY }}
      ONEDRIVE_EXCEL_NBA_PATH: ${{ vars.ONEDRIVE_EXCEL_NBA_PATH }}
      LOCAL_EXCEL_NBA_PATH: ${{ vars.LOCAL_EXCEL_NBA_PATH }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        id: auth
        run: |
          # Safely create the JSON file from the secret
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY_NEW }}"
          echo "keyyyyy"
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY_NEW }}" | base64 -d > /tmp/gcp-key.json          

          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project makunbarunner-poject      
          
      - name: Start Google Cloud VM
        id: start-vm
        run: |
          # Start the VM
          gcloud compute instances start makunbarunnerubuntu-vm --zone=us-west1-a

          # Wait for the VM to be up and running
          RETRY_COUNT=0
          MAX_RETRIES=7
          SLEEP_TIME=15
          while true; do
            VM_STATUS=$(gcloud compute instances describe makunbarunnerubuntu-vm --zone=us-west1-a --format='get(status)')
            if [ "$VM_STATUS" == "RUNNING" ]; then
              echo "VM is up and running."
              break
            fi

            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "VM did not start within the allowed time. Exiting."
              exit 1
            fi

            echo "VM is not ready yet. Retrying in $SLEEP_TIME seconds..."
            sleep $SLEEP_TIME
            ((RETRY_COUNT++))
          done

          # Get the new external IP
          EXTERNAL_IP=$(gcloud compute instances describe makunbarunnerubuntu-vm --zone=us-west1-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "External IP: $EXTERNAL_IP"
          echo "::set-output name=vm_ip::$EXTERNAL_IP"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY_NEW }}

      - name: Debugging SSH private key
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY_NEW }}" | ssh-add -
          ssh-add -l
      
      - name: Install Python 3.10 on the VM (if not already installed)
        run: |
          # Install dependencies to create the virtual environment
          sudo apt update
          sudo apt install -y python3.10 python3.10-venv python3.10-dev python3-pip          

          # Set Python 3.10 as the default python3 version
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
          sudo update-alternatives --config python3

          # Verify the installed Python version
          python3 --version
          
          # Check if pip is installed
          python3 -m pip --version || { echo "pip is not installed"; exit 1; }

          # Check if venv is available
          python3 -m venv --help || { echo "python3 -m venv is not available"; exit 1; }


      
      - name: Wait for VM to Be Ready
        run: |
          VM_IP=${{ steps.start-vm.outputs.vm_ip }}
          echo "Checking if VM is ready at IP: $VM_IP"
      
          RETRY_COUNT=0
          MAX_RETRIES=10
          SLEEP_TIME=15
          CONNECT_TIMEOUT=10
      
          # Ensure script does not exit on non-zero status
          set +e
      
          while true; do
            echo "Attempting to connect to $VM_IP via SSH... (Retry $((RETRY_COUNT + 1))/$MAX_RETRIES)"
      
            # Try to SSH and capture the exit code
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$CONNECT_TIMEOUT makubex1719@gmail.com@$VM_IP exit
            SSH_STATUS=$?
      
            # Log the exit status for visibility
            echo "SSH connection exit status: $SSH_STATUS"
      
            if [ $SSH_STATUS -eq 0 ]; then
              echo "VM is ready for SSH connections."
              break
            fi
      
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "VM did not become ready within the allowed time. Exiting."
              exit 1
            fi
      
            echo "VM is not ready yet. Retrying in $SLEEP_TIME seconds..."
            sleep $SLEEP_TIME
            ((RETRY_COUNT++))
          done
        shell: bash
        
        
        
      - name: SSH into Google Cloud VM and Deploy
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref }}"
          BRANCH_NAME=${BRANCH_NAME#refs/heads/}
          ssh -o StrictHostKeyChecking=no makubex1719@gmail.com@${{ steps.start-vm.outputs.vm_ip }} << EOF
            echo "Deploying branch: $BRANCH_NAME"   
            
            echo "Listing current dir"
            echo "Listing current dir"
            echo "Listing current dir"
            ls
            echo "Listing current dir"
            echo "Listing current dir"
            echo "Listing current dir"

            
          EOF
               
      

      - name: Stop Google Cloud VM
        if: always()  # Ensure this step always runs
        run: |
          gcloud compute instances stop makunbarunnerubuntu-vm --zone=us-west1-a
