name: ScheduleRunnerNba

on:
  schedule:
    - cron: '0 14 * * *'  # This runs every day at 10:00 AM UTC

  workflow_dispatch:   # Allow manual triggering and custom parameters
    inputs:
      branch:
        description: 'Branch to deploy'  # Custom input to specify a branch
        required: false  # Optional, set to true if you want this to be required
        default: 'main'  # Default to the branch that triggered the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      GSHEET_NBA_MAKU_CREDENTIALS: ${{ secrets.GSHEET_NBA_MAKU_CREDENTIALS }}
      GSHEET_NBA_MAKU_FOLDER_ID: ${{ secrets.GSHEET_NBA_MAKU_FOLDER_ID }}
      FORMAT_OUTPUT_TYPE: ${{ vars.FORMAT_OUTPUT_TYPE }}
      FILENAME_OUTPUT: ${{ vars.FILENAME_OUTPUT }}
      GSHEET_NBA_MAKU_TIME_DELAY: ${{ vars.GSHEET_NBA_MAKU_TIME_DELAY }}
      ONEDRIVE_EXCEL_NBA_PATH: ${{ vars.ONEDRIVE_EXCEL_NBA_PATH }}
      LOCAL_EXCEL_NBA_PATH: ${{ vars.LOCAL_EXCEL_NBA_PATH }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        id: auth
        run: |
          # Safely create the JSON file from the secret
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY_NEW }}" | base64 -d > /tmp/gcp-key.json          

          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project makunbarunner-poject      
          
      - name: Start Google Cloud VM
        id: start-vm
        run: |
          # Start the VM
          gcloud compute instances start makunbarunnerubuntu-vm --zone=us-west1-a

          # Wait for the VM to be up and running
          RETRY_COUNT=0
          MAX_RETRIES=7
          SLEEP_TIME=15
          while true; do
            VM_STATUS=$(gcloud compute instances describe makunbarunnerubuntu-vm --zone=us-west1-a --format='get(status)')
            if [ "$VM_STATUS" == "RUNNING" ]; then
              echo "VM is up and running."
              break
            fi

            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "VM did not start within the allowed time. Exiting."
              exit 1
            fi

            echo "VM is not ready yet. Retrying in $SLEEP_TIME seconds..."
            sleep $SLEEP_TIME
            ((RETRY_COUNT++))
          done

          # Get the new external IP
          EXTERNAL_IP=$(gcloud compute instances describe makunbarunnerubuntu-vm --zone=us-west1-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "External IP: $EXTERNAL_IP"
          echo "::set-output name=vm_ip::$EXTERNAL_IP"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY_NEW }}

      - name: Debugging SSH private key
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY_NEW }}" | ssh-add -
          ssh-add -l
      
            
      - name: Wait for VM to Be Ready
        run: |
          VM_IP=${{ steps.start-vm.outputs.vm_ip }}
          echo "Checking if VM is ready at IP: $VM_IP"
      
          RETRY_COUNT=0
          MAX_RETRIES=10
          SLEEP_TIME=15
          CONNECT_TIMEOUT=10
      
          # Ensure script does not exit on non-zero status
          set +e
      
          while true; do
            echo "Attempting to connect to $VM_IP via SSH... (Retry $((RETRY_COUNT + 1))/$MAX_RETRIES)"
      
            # Try to SSH and capture the exit code
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=$CONNECT_TIMEOUT makubex1719@$VM_IP exit
            SSH_STATUS=$?
      
            # Log the exit status for visibility
            echo "SSH connection exit status: $SSH_STATUS"
      
            if [ $SSH_STATUS -eq 0 ]; then
              echo "VM is ready for SSH connections."
              break
            fi
      
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "VM did not become ready within the allowed time. Exiting."
              exit 1
            fi
      
            echo "VM is not ready yet. Retrying in $SLEEP_TIME seconds..."
            sleep $SLEEP_TIME
            ((RETRY_COUNT++))
          done
        shell: bash
        
      - name: Validate and Install Python 3.10 on the VM
        run: |
          # Helper function to log messages
          log() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
          }

          echo "print current directory"
          pwd
          echo "print current directory"
      
          # Check if Python 3.10 is installed
          if python3.10 --version &>/dev/null; then
            log "‚úÖ Python 3.10 is already installed."
          else
            log "‚ö†Ô∏è  Python 3.10 is not installed. Installing now..."
            
            # Update package list and install Python 3.10 and dependencies
            sudo apt update
            sudo apt install -y python3.10 python3.10-venv python3.10-dev python3-pip
      
            # Set Python 3.10 as the default python3 version
            sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
            sudo update-alternatives --config python3
      
            # Verify the installation
            if python3 --version | grep -q "3.10"; then
              log "‚úÖ Python 3.10 successfully installed and set as default."
            else
              log "‚ùå Python 3.10 installation failed!"
              exit 1
            fi
          fi
      
          # Validate pip installation
          if python3 -m pip --version &>/dev/null; then
            log "‚úÖ pip is already installed."
          else
            log "‚ö†Ô∏è  pip is not installed. Installing now..."
            python3 -m ensurepip --upgrade || { log "‚ùå pip installation failed!"; exit 1; }
            log "‚úÖ pip installed successfully."
          fi
      
          # Validate venv availability
          if python3 -m venv --help &>/dev/null; then
            log "‚úÖ venv is available."
          else
            log "‚ùå python3 -m venv is not available. Installation failed!"
            exit 1
          fi
      
          log "üéâ Python 3.10 setup and validation completed successfully."
        
        
      - name: SSH into Google Cloud VM and Deploy
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || github.ref }}"
          BRANCH_NAME=${BRANCH_NAME#refs/heads/}
          ssh -o StrictHostKeyChecking=no makubex1719@${{ steps.start-vm.outputs.vm_ip }} << EOF
            echo "Deploying branch: $BRANCH_NAME"   
            
            export GSHEET_NBA_MAKU_CREDENTIALS="${{ secrets.GSHEET_NBA_MAKU_CREDENTIALS }}"
            export GSHEET_NBA_MAKU_FOLDER_ID="${{ secrets.GSHEET_NBA_MAKU_FOLDER_ID }}"
            export FORMAT_OUTPUT_TYPE="${{ vars.FORMAT_OUTPUT_TYPE }}"
            export FILENAME_OUTPUT="${{ vars.FILENAME_OUTPUT }}"
            export GSHEET_NBA_MAKU_TIME_DELAY="${{ vars.GSHEET_NBA_MAKU_TIME_DELAY }}"
            export ONEDRIVE_EXCEL_NBA_PATH="${{ vars.ONEDRIVE_EXCEL_NBA_PATH }}"
            export LOCAL_EXCEL_NBA_PATH="${{ vars.LOCAL_EXCEL_NBA_PATH }}"

                        
            find . -name "__pycache__" -exec rm -rf {} +

            cd /home/makubex1719
            rm -rf NbaStats            
            git clone --depth=1 --branch "$BRANCH_NAME" https://github.com/makuproxy/NbaStats.git
            cd NbaStats
            git fetch --all
            git reset --hard origin/$BRANCH_NAME
            git clean -fdx
            
            
            # Install Python 3.10 and other dependencies
            sudo apt update
            sudo apt install -y python3-venv python3-pip python3-dev python3-virtualenv     
                     

            # Install Python 3.10 and ensure pip and venv work
            python3 -m ensurepip --upgrade
                  
            echo "List python versions"
            python3 --version
            which python3

            
            echo "Creating virtual environment"
            python3 -m venv /home/makubex1719/venv
            
            source /home/makubex1719/venv/bin/activate

            # Validate that the virtual environment was created correctly
            if [ ! -d "/home/makubex1719/venv" ]; then
              echo "Virtual environment creation failed!"
              exit 1
            fi


            # Check pip installation
            python3 -m pip --version || { echo "pip installation failed"; exit 1; }

            python3 -m pip install --upgrade pip
            python3 -m pip install -r requirements.txt

            echo "Clearing Python bytecode cache:"
            find . -name "__pycache__" -exec rm -rf {} +
            find . -name "*.pyc" -exec rm -f {} +            

            python3 GetAndBulkDataFromNbaPage.py
          EOF
               
      

      - name: Stop Google Cloud VM
        if: always()  # Ensure this step always runs
        run: |
          gcloud compute instances stop makunbarunnerubuntu-vm --zone=us-west1-a
